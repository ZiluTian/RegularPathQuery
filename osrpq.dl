// ab*c => 12*3
// computed bc_reachable through a separate algorithm and use as an input instead

#define BOUND 80

.decl labelled_edge(x:number, l:number, y:number)
.input labelled_edge(filename="input/dataset3.facts")

.decl bc_reachable(x:number, y:number)
.input bc_reachable(filename="input/bcReachable.facts")

.decl deg(x: number, d: number)
.decl bc_light(x:number, y:number)
.output bc_light(filename="dbg/bc_light")
.decl bc_heavy(x:number)
.output bc_heavy(filename="dbg/bc_heavy")
.decl T(x:number, y:number)
// .output T(filename="dbg/t")

.decl Q_light(x:number, y:number)
.output Q_light(filename="dbg/qlight")

.decl Q_heavy(x:number, y:number)
.output Q_heavy(filename="dbg/qheavy")

deg(x, count : { bc_reachable(x, _) }) :- bc_reachable(x, _).
.output deg(filename="dbg/deg_with_limit")

bc_light(x, y) :- bc_reachable(x, y), deg(x, d), d < BOUND.
bc_heavy(x) :- bc_reachable(x, _), deg(x, 80).

Q_light(x, y) :- labelled_edge(x, 1, z), bc_light(z, y).
T(x, y) :- labelled_edge(x, 1, y), bc_heavy(y).
T(x, y) :- T(x, z), labelled_edge(z, 2, y).
Q_heavy(x, y) :- T(x, z), labelled_edge(z, 3, y).