// ab*c => 12*3
#define INPUT_FILE "input/dataset5.facts"

#ifndef BOUND
#define BOUND 146
#endif

// actual derived tuple numbers per x (count) is bound/2+1, rather than bound

.functor degree(x:number):number
.functor inc_degree(x:number):number

.decl labelled_edge(x:number, l:number, y:number)
.input labelled_edge(filename=INPUT_FILE)

.decl bc_reachable(x:number, y:number)
.output bc_reachable(filename="dbg/v1_bc_reachable.csv")

// actual derived tuple numbers per x (count) is bound/2+1, rather than bound
bc_reachable(@inc_degree(x), y) :- labelled_edge(x, 3, y), @degree(x) <= BOUND.
bc_reachable(@inc_degree(x), y) :- labelled_edge(x, 2, z), bc_reachable(z, y), @degree(x) <= BOUND.

.decl deg(x: number, d: number)
.decl bc_light(x:number, y:number)
.decl bc_heavy(x:number)
.decl Q_light(x:number, y:number)
.decl Q_heavy(x:number, y:number)
.decl T(x:number, y:number)

deg(x, count : { bc_reachable(x, _) }) :- bc_reachable(x, _).
.output deg(filename="dbg/v1_deg_with_limit.csv")

bc_light(x, y) :- bc_reachable(x, y), deg(x, d), (d-1)*2 < BOUND.
bc_heavy(x) :- bc_reachable(x, _), deg(x, d), (d-1)*2 = BOUND.

Q_light(x, y) :- labelled_edge(x, 1, z), bc_light(z, y).
T(x, y) :- labelled_edge(x, 1, y), bc_heavy(y).
T(x, y) :- T(x, z), labelled_edge(z, 2, y).
Q_heavy(x, y) :- T(x, z), labelled_edge(z, 3, y).

.output Q_heavy(filename="output/v1_Q_heavy.csv")
.output Q_light(filename="output/v1_Q_light.csv")